"use client";
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion"; // shadcn path
import { useEffect, useState } from "react";
import { useUser } from "@clerk/nextjs";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { useCart } from "@/context/CartContext";
import { useUserBalance } from "@/context/balance";
import { useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ChevronDown, HelpCircle, Info, ChevronUp } from "lucide-react";
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ContactForm from "@/components/contact-form";
import PhoneInput from 'react-phone-input-2';
import 'react-phone-input-2/lib/style.css';
import ReactCountryFlag from "react-country-flag";
import ClientBalanceProvider from "@/components/ClientBalanceProvider";

// Interface for the data structure returned by your /api/generatetoken endpoint
// This interface MUST match the JSON object your backend sends back
interface PayUPreparedData {
    merchantId: string;
    accountId: string;
    description: string;
    referenceCode: string;
    amount: string;
    tax: string;
    taxReturnBase: string;
    currency: string;
    signature: string; // Generated securely on the backend
    test?: string; // '1' for sandbox, '0' for production (set by backend)
    buyerEmail: string;
    responseUrl: string;
    confirmationUrl: string;
    buyerFullName?: string;
    shippingAddress?: string;
    shippingCity?: string;
    shippingCountry?: string;
    telephone?: string;
    // Add any other fields PayU requires that your backend provides
}

// Interface for delivery information state
interface DeliveryInfo {
    email: string;
    marketingEmail: boolean;
    country: string;
    firstname: string;
    lastname: string;
    address: string;
    apartment: string;
    city: string;
    province: string;
    postal: string;
    phone: string;
    saveInfo: boolean; // If you want to keep these checkboxes
    marketingSms: boolean; // If you want to keep these checkboxes
}

function envioIncompleto(deliveryInfo: DeliveryInfo) {
    return (
        !deliveryInfo.firstname ||
        !deliveryInfo.lastname ||
        !deliveryInfo.address ||
        !deliveryInfo.city ||
        !deliveryInfo.province ||
        !deliveryInfo.postal ||
        !deliveryInfo.phone ||
        !deliveryInfo.country || deliveryInfo.country.length === 0
    );
}

export default function CheckoutPage() {
    return (
        <ClientBalanceProvider>
            <CheckoutContent />
        </ClientBalanceProvider>
    );
}

function CheckoutContent() {
    const { userSaldo, fetchUserSaldo } = useUserBalance();
    const { cartItems, clearCart } = useCart();
    const { isSignedIn, user } = useUser();
    const router = useRouter();

    const [paymentMethod, setPaymentMethod] = useState<"saldo" | "payu">("saldo");
    const [tipAmount, setTipAmount] = useState<string | null>(null);
    const [loading, setLoading] = useState(false);
    const [deliveryInfo, setDeliveryInfo] = useState<DeliveryInfo>({
        email: '',
        marketingEmail: true,
        country: 'CO',
        firstname: '',
        lastname: '',
        address: '',
        apartment: '',
        city: '',
        province: '', // Consider making this a dropdown if needed
        postal: '',
        phone: '',
        saveInfo: false,
        marketingSms: false,
    });
    const [open, setOpen] = useState(false);

    // Calculations
    const totalPrice = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const tax = totalPrice * 0.19;
    const tip = tipAmount && tipAmount !== "none" ? totalPrice * (parseInt(tipAmount) / 100) : 0;
    const grandTotal = totalPrice + tax + tip;

    const countryToCurrency = {
        USD: "USD",
        CO: "COP",
        VE: "VES",
        AR: "ARS",
        MX: "MXN",
        US: "USD",
        ES: "EUR",
        // ...agrega los que necesites
    };

    const selectedCountry = Array.isArray(deliveryInfo.country)
        ? deliveryInfo.country[0]
        : deliveryInfo.country;

    const currency = countryToCurrency[selectedCountry as keyof typeof countryToCurrency] || "COP";

    // Effects
    useEffect(() => {
        if (isSignedIn && user) {
            setDeliveryInfo(prev => ({
                ...prev,
                email: user.primaryEmailAddress?.emailAddress || prev.email,
                firstname: user.firstName || prev.firstname,
                lastname: user.lastName || prev.lastname
                // El resto de los campos los llena el usuario manualmente
            }));
        }
    }, [isSignedIn, user, fetchUserSaldo]);

    // Handlers
    const handleDeliveryInfoChange = (field: keyof DeliveryInfo, value: string | boolean) => {
        setDeliveryInfo(prev => ({ ...prev, [field]: value }));
    };

    // --- Payment Logic ---

    // Handles payment using internal website balance
    const handleInternalBalancePayment = async () => {
        setLoading(true);
        try {
            if (!user?.id) {
                throw new Error("No hay sesión activa");
            }

            if (envioIncompleto(deliveryInfo)) {
                toast.warn("Por favor, completa todos los datos de envío antes de continuar.");
                return;
            }

            const response = await fetch("/api/pagos", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
            body: JSON.stringify({
                subtotal: totalPrice,
                tip: tip || 0,
                shipping: 0,
                taxes: tax,
                total: grandTotal,
                productos: cartItems.map(item => item),
                type: "saldo",
                // Agrega aquí los datos de envío:
                address: deliveryInfo.address,
                house_apt: deliveryInfo.apartment,
                city: deliveryInfo.city,
                state: deliveryInfo.province,
                country: deliveryInfo.country,
                postal_code: deliveryInfo.postal,
                phone: deliveryInfo.phone,
                first_name: deliveryInfo.firstname,
                last_name: deliveryInfo.lastname,
            }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || data.details || "Error al procesar el pago con saldo");
            }

            toast.success("¡Pago procesado con éxito con tu saldo!");
            fetchUserSaldo();

            // Guardar datos en localStorage
            const orderDetails = {
                orderId: data.orderId,
                total: grandTotal,
                tax,
                tip,
                paymentMethod: 'saldo',
                items: cartItems,
                shippingAddress: {
                    firstname: deliveryInfo.firstname,
                    lastname: deliveryInfo.lastname,
                    address: deliveryInfo.address,
                    apartment: deliveryInfo.apartment,
                    city: deliveryInfo.city,
                    province: deliveryInfo.province,
                    postal: deliveryInfo.postal,
                    phone: deliveryInfo.phone,
                    country: deliveryInfo.country,
                }
            };

            localStorage.setItem("orderDetails", JSON.stringify(orderDetails));

            const orderId = data.orderId;
            router.push(`/thankyou?orderId=${orderId}`);

        } catch (error: any) {
            console.error("Error en el pago con saldo:", error);
            toast.error(error.message || "Hubo un error al procesar tu pago");
        } finally {
            setLoading(false);
        }
    };

    const handlePayUPayment = async () => {
        setLoading(true);

        if (envioIncompleto(deliveryInfo)) {
            toast.warn("Por favor, completa todos los datos de envío antes de continuar.");
            setLoading(false);
            return;
        }

        // 1. Preparar los datos de la orden
        const referenceCode = `Order_${Date.now()}`;
        const orderDataForApi = {
            amount: grandTotal.toFixed(0),
            tax: tax.toFixed(2),
            taxReturnBase: totalPrice.toFixed(2),
            currency: currency,
            referenceCode,
            description: `Compra: ${cartItems.map(i => `${i.quantity}x ${i.name}`).join(", ")}`,
            buyerEmail: deliveryInfo.email!,
            buyerFullName: `${deliveryInfo.firstname} ${deliveryInfo.lastname}`.trim(),
            telephone: deliveryInfo.phone!,
            shippingAddress: deliveryInfo.address!,
            shippingCity: deliveryInfo.city!,
            shippingCountry: "CO",
            shippingState: deliveryInfo.province!,
            postalCode: deliveryInfo.postal!,
            responseUrl: `${window.location.origin}/thankyou`,
            confirmationUrl: `https://08b1-190-250-217-188.ngrok-free.app/api/update-payment-status`,
            cartItems: cartItems.map(item => ({
                id: Number(item.id),
                name: item.name,
                quantity: Number(item.quantity),
                price: Number(item.price),
                image: Array.isArray(item.image) ? item.image[0] : item.image,
                color: item.color,
                size: item.size,
                sizeRange: item.sizeRange,
                taxes: tax.toFixed(2),
                tipAmount: tip.toFixed(2),
                subtotal: totalPrice.toFixed(2),
                total: grandTotal.toFixed(2),
            })),
            tipAmount: tip.toFixed(2),
        };

        try {
            // 2. Registrar la orden en tu base de datos
            console.log("URL enviada al backend:", `http://localhost:3000?referenceCode=${referenceCode}&TX_VALUE=${grandTotal}&currency=${currency}&buyerEmail=${deliveryInfo.email}&authorizationCode=pendiente&transactionState=pendiente&processingDate=${Date.now()}`);
            const resOrder = await fetch("/api/process-payment", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    url: `http://localhost:3000?referenceCode=${referenceCode}&TX_VALUE=${grandTotal}&currency=${currency}&buyerEmail=${deliveryInfo.email}&authorizationCode=pendiente&transactionState=pendiente`,
                    items: orderDataForApi.cartItems
                }),
            });
            if (!resOrder.ok) throw new Error("Error registrando la orden");

            // 3. Preparar el pago con PayU
            const res = await fetch("/api/generatetoken", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(orderDataForApi),
            });
            if (!res.ok) throw new Error("Error preparando pago");
            const prepared = await res.json();

            if (!prepared.signature) {
                throw new Error("Falta firma en la respuesta de pago");
            }

            // Guardar en localStorage (opcional)
            if (typeof window !== "undefined") {
                const toStore = {
                    paymentMethod: "payu",
                    referenceCode,
                    total: grandTotal,
                    tax,
                    tip,
                    items: cartItems,
                    shippingAddress: deliveryInfo
                };
                localStorage.setItem("orderDetails", JSON.stringify(toStore));
            }

            // 4. Redirigir a PayU
            const form = document.createElement("form");
            form.method = "post";
            form.action = process.env.NEXT_PUBLIC_PAYU_URL!;
            Object.entries(prepared).forEach(([k, v]) => {
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = k;
                input.value = String(v ?? "");
                form.appendChild(input);
            });
            document.body.appendChild(form);
            form.submit();

        } catch (err: any) {
            console.error("PayU Payment Error:", err);
            toast.error(err.message);
            setLoading(false);
        }
    };

    // Main handler called by the "Pagar ahora" button
    const handlePago = async () => {
        console.log("handlePago called"); // Debugging line

        // --- Basic Form Validation ---
        // Check cart only needs to be done once
        if (cartItems.length === 0) {
            console.log("Cart is empty"); // Debugging line
            toast.warn("Tu carrito está vacío.");
            return;
        }

        // Check required fields based on auth status and payment method
        const requiredFieldsMissing = (
            // Si no está autenticado, requiere los campos
            !isSignedIn &&
            (!deliveryInfo.email || !deliveryInfo.firstname || !deliveryInfo.lastname || !deliveryInfo.address || !deliveryInfo.city)
        );

        if (requiredFieldsMissing) {
            console.log("Required fields are missing"); // Debugging line
            toast.warn("Por favor, completa toda la información requerida de contacto y entrega.");
            return;
        }
        // --- End Validation ---

        console.log("Payment Method:", paymentMethod); // Debugging line
        console.log("Authentication Status:", isSignedIn); // Debugging line

        if (paymentMethod === "saldo") {
            if (!isSignedIn) {
                console.log("User is not authenticated"); // Debugging line
                toast.error("Debes iniciar sesión para pagar con saldo.");
                return;
            }
            console.log("Calling handleInternalBalancePayment"); // Debugging line
            await handleInternalBalancePayment();
        } else if (paymentMethod === "payu") {
            console.log("Calling handlePayUPayment"); // Debugging line
            await handlePayUPayment();
        } else {
            console.log("Invalid payment method selected"); // Debugging line
            toast.error("Selecciona un método de pago válido.");
        }
    };

    const countries = [
        { code: 'CO', name: 'Colombia' },
        { code: 'VE', name: 'Venezuela' },
        { code: 'EC', name: 'Ecuador' },
        { code: 'PE', name: 'Perú' },
        { code: 'BO', name: 'Bolivia' },
        { code: 'CL', name: 'Chile' },
        { code: 'AR', name: 'Argentina' },
        { code: 'UY', name: 'Uruguay' },
        { code: 'PY', name: 'Paraguay' },
        { code: 'BR', name: 'Brasil' },
        { code: 'MX', name: 'México' },
        { code: 'GT', name: 'Guatemala' },
        { code: 'HN', name: 'Honduras' },
        { code: 'NI', name: 'Nicaragua' },
        { code: 'CR', name: 'Costa Rica' },
        { code: 'PA', name: 'Panamá' },
        { code: 'DO', name: 'República Dominicana' },
        { code: 'PR', name: 'Puerto Rico' },
        { code: 'CU', name: 'Cuba' },
        { code: 'BZ', name: 'Belice' },
        { code: 'SV', name: 'El Salvador' },
        { code: 'GQ', name: 'Guinea Ecuatorial' },
        { code: 'US', name: 'Estados Unidos' },
        { code: 'CA', name: 'Canadá' },
        { code: 'GB', name: 'Reino Unido' },
        { code: 'AU', name: 'Australia' },
        { code: 'NZ', name: 'Nueva Zelanda' },
        { code: 'ES', name: 'España' },
        { code: 'FR', name: 'Francia' },
        { code: 'DE', name: 'Alemania' },
        { code: 'IT', name: 'Italia' },
        { code: 'PT', name: 'Portugal' },
        { code: 'SA', name: 'Arabia Saudita' },
        { code: 'AE', name: 'Emiratos Árabes Unidos' }, 
    ];
      

    // Justo antes del return
    console.log("paymentMethod:", paymentMethod, "isSignedIn:", isSignedIn);

    // --- JSX ---
    return (
        <div className="min-h-screen flex flex-col lg:flex-row">
            {/* Left Side: Form */}
            <div className="flex-1 p-4 md:p-8 bg-white">
                <div className="max-w-xl mx-auto">
                    {/* === Contacto y Entrega Sections (Only show if NOT authenticated) === */}
                    <Accordion type="single" collapsible className="w-full">
                        <AccordionItem value="delivery">
                            <AccordionTrigger className="text-xl font-bold mb-4">
                                Datos de Envío
                            </AccordionTrigger>
                            <AccordionContent>
                                <div className="space-y-4 mb-6">

                                    {/* Name Fields */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <Label htmlFor="firstname" className="sr-only">Nombre</Label>
                                            <Input id="firstname" placeholder="Nombre" required
                                                value={deliveryInfo.firstname}
                                                onChange={(e) => handleDeliveryInfoChange('firstname', e.target.value)}
                                            />
                                        </div>
                                        <div>
                                            <Label htmlFor="lastname" className="sr-only">Apellidos</Label>
                                            <Input id="lastname" placeholder="Apellidos" required
                                                value={deliveryInfo.lastname}
                                                onChange={(e) => handleDeliveryInfoChange('lastname', e.target.value)}
                                            />
                                        </div>
                                    </div>

                                    {/* Address Fields */}
                                    <div>
                                        <Label htmlFor="address" className="sr-only">Dirección</Label>
                                        <Input id="address" placeholder="Dirección" required
                                            value={deliveryInfo.address}
                                            onChange={(e) => handleDeliveryInfoChange('address', e.target.value)}
                                        />
                                    </div>
                                    <div>
                                        <Label htmlFor="apartment" className="sr-only">Casa, apartamento, etc. (opcional)</Label>
                                        <Input id="apartment" placeholder="Casa, apartamento, etc. (opcional)"
                                            value={deliveryInfo.apartment}
                                            onChange={(e) => handleDeliveryInfoChange('apartment', e.target.value)}
                                        />
                                    </div>

                                    {/* City, Province, Postal */}
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div>
                                            <Label htmlFor="city" className="sr-only">Ciudad</Label>
                                            <Input id="city" placeholder="Ciudad" required
                                                value={deliveryInfo.city}
                                                onChange={(e) => handleDeliveryInfoChange('city', e.target.value)}
                                            />
                                        </div>
                                        <div>
                                            <Label htmlFor="province" className="sr-only">Departamento / Provincia</Label>
                                            {/* Consider changing to a Select for Colombian departments if needed */}
                                            <Input id="province" placeholder="Departamento / Provincia" required
                                                value={deliveryInfo.province}
                                                onChange={(e) => handleDeliveryInfoChange('province', e.target.value)}
                                            />
                                        </div>
                                        <div>
                                            <Label htmlFor="country" className="sr-only">País / Región</Label>
                                            <Select defaultValue={deliveryInfo.country} name="country" onValueChange={(value) => handleDeliveryInfoChange('country', value)}>
                                            <SelectTrigger id="country">
                                                <SelectValue placeholder="País / Región" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {countries.map((country) => (
                                                <SelectItem key={country.code} value={country.code}>
                                                    <div className="flex items-center">
                                                    <ReactCountryFlag countryCode={country.code} svg style={{ width: '20px', height: '15px' }} />
                                                    <span className="ml-2">{country.name}</span>
                                                    </div>
                                                </SelectItem>
                                                ))}
                                            </SelectContent>
                                            </Select>
                                        </div>
                                    </div>
                                    {/* Phone and Postal Code Fields */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        {/* Phone */}
                                        <div>
                                            <Label htmlFor="phone" className="sr-only">Teléfono (opcional)</Label>
                                            <PhoneInput
                                                country={'co'}
                                                value={deliveryInfo.phone}
                                                onChange={(phone) => handleDeliveryInfoChange('phone', phone)}
                                                inputProps={{
                                                    name: 'phone',
                                                    required: false,
                                                    autoFocus: false,
                                                }}
                                            />
                                        </div>
                                        {/* Código Postal */}
                                        <div>
                                            <Label htmlFor="postal" className="sr-only">Código postal (opcional)</Label>
                                            <Input
                                                id="postal"
                                                placeholder="Código postal (opcional)"
                                                value={deliveryInfo.postal}
                                                onChange={(e) => handleDeliveryInfoChange('postal', e.target.value)}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Accordion>

                    {/* Shipping Method */}
                    <h2 className="text-xl font-bold mb-4">Método de envío</h2>
                    <div className="border rounded-md mb-8">
                        <div className="p-4 flex justify-between items-center">
                            <div className="flex items-center gap-2">
                                {/* Using a div as Radios not needed if only one option */}
                                <div className="w-4 h-4 border border-gray-400 rounded-full bg-gray-200 flex items-center justify-center">
                                    <div className="w-2 h-2 bg-gray-500 rounded-full"></div> {/* Visually checked */}
                                </div>
                                <Label htmlFor="standard-shipping" className="ml-1">Envío Estándar</Label>
                            </div>
                            <span className="font-medium text-green-600">Gratis</span>
                        </div>
                    </div>

                    {/* Payment Method Selection */}
                    <h2 className="text-xl font-bold mb-4">Pago</h2>
                    <p className="text-sm text-gray-600 mb-4">Todas las transacciones son seguras y están encriptadas.</p>

                    <RadioGroup
                        value={paymentMethod}
                        onValueChange={(value) => setPaymentMethod(value as "saldo" | "payu")}
                        className="mb-8 space-y-2"
                    >
                        {/* Opción Saldo */}
                        {isSignedIn && (
                            <Label htmlFor="saldo" className={`border rounded-md p-4 flex justify-between items-center cursor-pointer transition-colors duration-150 ${paymentMethod === "saldo" ? "bg-blue-50 border-blue-500 ring-2 ring-blue-300" : "border-gray-300 hover:border-gray-400"}`}>
                                <div className="flex items-center gap-3">
                                    <RadioGroupItem id="saldo" value="saldo" />
                                    <span>Saldo Disponible: <span className="font-semibold">${userSaldo?.toFixed(2) ?? '0.00'}</span></span>
                                </div>
                                <div className="bg-green-500 text-white px-2 py-0.5 rounded text-xs font-bold">$</div>
                            </Label>
                        )}

                        {/* Opción PayU */}
                        <Label htmlFor="payu" className={`border rounded-md p-4 flex justify-between items-center cursor-pointer transition-colors duration-150 ${paymentMethod === "payu" ? "bg-blue-50 border-blue-500 ring-2 ring-blue-300" : "border-gray-300 hover:border-gray-400"}`}>
                            <div className="flex items-center gap-3">
                                <RadioGroupItem id="payu" value="payu" />
                                <div>
                                    <span>Pagar con PayU</span>
                                    <span className="text-xs block text-gray-500">(Tarjetas, PSE, Nequi, etc.)</span>
                                </div>
                            </div>
                            <div className="flex items-center gap-1 flex-wrap">
                                <img src="/p4.svg" alt="Visa" className="h-5" />
                                <img src="/p3.svg" alt="Mastercard" className="h-5" />
                                <img src="/p2.svg" alt="American Express" className="h-5" />
                                <img src="/p1.svg" alt="PSE" className="h-5" />
                                <span className="text-xs text-gray-500 ml-1">+ Más</span>
                            </div>
                        </Label>
                    </RadioGroup>

                    {/* Paneles contextuales: ¡ahora van AQUÍ! */}
                    {paymentMethod === "saldo" && isSignedIn && (
                        <div className="border-t-0 rounded-b-md px-4 py-2 bg-gray-50 text-sm text-gray-600 -mt-2">
                            Se usará tu saldo disponible. Asegúrate de tener suficiente.
                        </div>
                    )}
                    {paymentMethod === "payu" && (
                        <div className="border-t-0 rounded-b-md px-4 py-2 bg-gray-50 text-sm text-gray-600 -mt-2">
                            Serás redirigido a la pasarela segura de PayU para completar tu pago.
                        </div>
                    )}

                    {/* Tip Section */}
                    <div className="mt-8 border-t pt-6">
                        <h2 className="text-xl font-bold mb-4">¿Agregar propina? <span className="text-base font-normal text-gray-500">(Opcional)</span></h2>
                        <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 mb-4">
                            {['5', '10', '20', 'none'].map(perc => (
                                <Button
                                    key={perc}
                                    variant={tipAmount === perc ? "default" : "outline"}
                                    className={`flex flex-col items-center justify-center h-auto py-3 text-center transition-colors duration-150 ${tipAmount === perc ? 'ring-2 ring-offset-1 ring-blue-500' : ''}`}
                                    onClick={() => setTipAmount(perc === tipAmount ? null : perc)} // Allow deselecting tip
                                >
                                    {perc !== 'none' ? (
                                        <>
                                            <span className="text-sm font-medium">{perc}%</span>
                                            <span className="text-xs text-muted-foreground">${(totalPrice * (parseInt(perc) / 100)).toFixed(2)}</span>
                                        </>
                                    ) : (
                                        <span className="text-sm font-medium">Ninguna</span>
                                    )}
                                </Button>
                            ))}
                        </div>
                        <p className="text-xs mb-6 text-center text-gray-500">Las propinas son voluntarias y muy apreciadas por el equipo.</p>

                        {/* Submit Button */}
                        <Button
                            type="button"
                            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 text-lg font-semibold rounded-md disabled:opacity-60 disabled:cursor-not-allowed"
                            disabled={loading || cartItems.length === 0 || !isSignedIn || envioIncompleto(deliveryInfo)}
                            onClick={handlePago}
                        >
                            {loading ? 'Procesando...' : `Pagar ahora $${grandTotal.toFixed(2)}`}
                        </Button>
                    </div>

                    {/* Footer Links */}
                    <div className="mt-8 text-center text-xs text-gray-500 space-x-2">
                        <Link href="/privacy-policy" className="hover:underline">Política de privacidad</Link>
                        <span>|</span>
                        <Link href="/terms-of-service" className="hover:underline">Términos de servicio</Link>
                        <span>|</span>
                        <Link href="/refund-policy" className="hover:underline">Política de reembolso</Link>
                    </div>
                </div>
            </div>

            {/* Right Side: Order Summary (No changes needed here unless desired) */}
            <div className="lg:w-2/5 bg-gray-100 p-4 md:p-8 border-t lg:border-t-0 lg:border-l border-gray-200">
                <div className="max-w-md mx-auto lg:sticky top-8"> {/* Make summary sticky on larger screens */}
                    <h2 className="text-lg font-semibold mb-6">Resumen del pedido</h2>
                    {cartItems.length === 0 ? (
                        <p className="text-center text-gray-600 py-8">Tu carrito está vacío.</p>
                    ) : (
                        <>
                            <div className="max-h-[40vh] overflow-y-auto pr-2 mb-4 border-b pb-2 space-y-4"> {/* Scrollable items */}
                                {cartItems.map((item) => (
                                    <div key={`${item.id}-${item.size}-${item.color}`} className="flex items-start gap-3">
                                        <div className="relative flex-shrink-0">
                                            <div className="w-16 h-16 bg-white rounded border flex items-center justify-center overflow-hidden">
                                                <Image
                                                    loader={({ src }) => src}
                                                    src={typeof item.image === 'string' ? item.image : (item.image?.[0] || '/placeholder.svg')}
                                                    alt={item.name}
                                                    width={60} height={60} className="object-contain"
                                                />
                                            </div>
                                            <div className="absolute -top-2 -right-2 w-5 h-5 bg-gray-600 text-white rounded-full flex items-center justify-center text-xs font-semibold">
                                                {item.quantity}
                                            </div>
                                        </div>
                                        <div className="flex-1 min-w-0">
                                            <p className="font-medium text-sm truncate">{item.name}</p>
                                            {(item.color || item.size || item.sizeRange) && (
                                                <p className="text-xs text-gray-500 truncate">
                                                    {item.color ? `Color: ${item.color}` : ''}
                                                    {item.color && (item.size || item.sizeRange) ? ' / ' : ''}
                                                    {item.size ? `Talla: ${item.size}` : ''}
                                                    {item.sizeRange ? `Rango: ${item.sizeRange}` : ''}
                                                </p>
                                            )}
                                        </div>
                                        <div className="text-right flex-shrink-0">
                                            <p className="font-medium text-sm">${(item.price * item.quantity).toFixed(2)}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>

                            {/* Calculation Summary */}
                            <div className="space-y-1 border-b pb-3 mb-3 text-sm">
                                <div className="flex justify-between">
                                    <span>Subtotal</span>
                                    <span>${totalPrice.toFixed(2)}</span>
                                </div>
                                {tip > 0 && (
                                    <div className="flex justify-between">
                                        <span>Propina</span>
                                        <span>${tip.toFixed(2)}</span>
                                    </div>
                                )}
                                <div className="flex justify-between">
                                    <span>Envío</span>
                                    <span className="font-medium text-green-600">GRATIS</span>
                                </div>
                                <div className="flex justify-between items-center">
                                    <div className="flex items-center gap-1">
                                        <span>Impuestos (IVA 19%)</span>
                                        <div data-tip={`Calculado como 19% de $${totalPrice.toFixed(2)}`}>
                                            <Info className="h-3.5 w-3.5 text-gray-400 cursor-help" />
                                        </div>
                                    </div>
                                    <span>${tax.toFixed(2)}</span>
                                </div>
                            </div>

                            {/* Grand Total */}
                            <div className="flex justify-between items-center text-lg font-bold pt-1">
                                <span>Total</span>
                                <div className="flex items-center gap-2">
                                    <span className="text-xs text-gray-500">{currency}</span>
                                    <span>${grandTotal.toFixed(2)}</span>
                                </div>
                            </div>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
}


